// Mocks generated by Mockito 5.2.0 from annotations
// in number_trivia_app_v2/test/presentation/state_holders/mocks/generate_mock_get_random_number_trivia.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:number_trivia_app_v2/core/errors/failures.dart' as _i6;
import 'package:number_trivia_app_v2/core/use_cases/use_case.dart' as _i8;
import 'package:number_trivia_app_v2/features/number_trivia/domain/entities/number_trivia_entity.dart'
    as _i7;
import 'package:number_trivia_app_v2/features/number_trivia/domain/repositories_contract/number_trivia_repository_contract.dart'
    as _i2;
import 'package:number_trivia_app_v2/features/number_trivia/domain/use_cases/get_random_number_trivia.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeNumberTriviaRepositoryContract_0 extends _i1.Fake
    implements _i2.NumberTriviaRepositoryContract {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetRandomNumberTrivia].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomNumberTrivia extends _i1.Mock
    implements _i4.GetRandomNumberTrivia {
  MockGetRandomNumberTrivia() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NumberTriviaRepositoryContract get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeNumberTriviaRepositoryContract_0())
          as _i2.NumberTriviaRepositoryContract);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.NumberTriviaEntity>> call(
          {_i8.NoParams? params}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#params: params}),
              returnValue:
                  Future<_i3.Either<_i6.Failure, _i7.NumberTriviaEntity>>.value(
                      _FakeEither_1<_i6.Failure, _i7.NumberTriviaEntity>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.NumberTriviaEntity>>);
}
